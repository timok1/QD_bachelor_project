#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
plots stuff from dipoleTrans.txt generated by Py script from Prokop in format
i,j,Ehomo,Elumo,dE,d0,d1,d2,|d|^2

Created on Thu Aug 10 11:09:17 2017
@author: katnewell
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import *
from numpy import *

data = np.genfromtxt('dipoleTrans.dat', delimiter=' ')

#########################################################
# generate interesting outputs:
#########################################################

# number of transitions
trans_i = data[:,0]
trans_j = data[:,1]
number_of_transitions_list = []
for item in trans_i:
    if not item in number_of_transitions_list:
        number_of_transitions_list.append(item)
for item in trans_j:
    if not item in number_of_transitions_list:
        number_of_transitions_list.append(item)
number_of_transitions_list.sort()
number_of_transitions = number_of_transitions_list[-1]
#print(number_of_transitions)

# energy levels
Ehomo = data[:,2]
Elumo = data[:,3]
energies = []
for item in Ehomo:
    if not item in energies:
        energies.append(item)
for item in Elumo:
    if not item in energies:
        energies.append(item)
energies.sort()
#print(energies)
np.savetxt('energy_levels.txt', energies)
plt.figure()
plt.eventplot(Ehomo,orientation='vertical',colors='b',label='HOMO')
plt.eventplot(Elumo,orientation='vertical',colors='r',label='LUMO')
#plt.eventplot(energies,orientation='vertical',colors='k')
plt.legend()
plt.savefig('energies.png')
plt.show()

#plot figure of dipole transitions
dE = data[:,4]# in eV
d_square = data[:,13] # in Debye^2
fij = d_square * dE * 0.0038  #converted into probability
rad_rate = fij * 1 * dE * dE * 43400000 # spontaneous emission rate in 1/s, degeneracy = 1

dipole_file = np.column_stack((dE,d_square))
oscillator_file = np.column_stack((dE, fij))
rate_file = np.column_stack((dE, rad_rate))

sorted_dipole = sorted(dipole_file, key=lambda x: (x[0]))
sorted_oscill = sorted(oscillator_file, key=lambda x: (x[0]))
sorted_rate = sorted(rate_file, key=lambda x: x[0])

np.savetxt('oscillator_dipole_sorted.txt',sorted_dipole,delimiter=',')
np.savetxt('oscillator_strenght_sorted.txt',sorted_oscill, delimiter=',')
np.savetxt('rad_rate_sorted.txt',sorted_rate,delimiter=',')

#plot the highest rate from binned data
binE1 = 0.025  #25 meV resolution in binning (=kT at room temperature)
last_value1 = sorted_rate[0][0]
max_rate = 0
max_rate_list = []
max_dE = []
n1 = 0
for n1 in range(len(sorted_rate)):
    ii1 = 0
    if sorted_rate[n1][0] <= (last_value1 + binE1):
        if sorted_rate[n1][1] > max_rate:
            max_rate = sorted_rate[n1][1]
    else:
        max_dE.append(last_value1 + binE1/2)
        max_rate_list.append(max_rate)
        last_value1 = sorted_rate[n1][0]
        max_rate = 0
        ii1 = ii1 + 1

plt.figure()
plt.semilogy(dE, rad_rate, 'r.')
plt.ylim(1000, 100000000)
#plt.semilogy(max_dE, max_rate_list,'g-')
plt.xlabel('Ei-Ej [eV]')
plt.ylabel('k_rad [1/s]')
plt.savefig('rad_rate.png')
plt.show()

#summed data with degeneracy
binE2 = 0.05  #25 meV resoltuion in binning (=kT at room temperature)
last_value2 = sorted_oscill[0][0]
sum_osc = 0
deg2 = 0
summed_oscill = []
summed_dE = []
summed_deg = []
n2 = 0
for n2 in range(len(sorted_oscill)):
    if sorted_oscill[n2][0] < (last_value2 + binE2):
        sum_osc = sum_osc + sorted_oscill[n2][1]
        deg2 = deg2 + 1
    else:
        summed_dE.append(last_value2 + binE2/2)
        summed_oscill.append(sum_osc * 0.00000265)
        summed_deg.append(deg2)
        last_value2 = sorted_oscill[n2][0]
        deg2 = 0
        sum_osc = 0

oscillator_summed_file = np.column_stack((summed_dE, summed_oscill, summed_deg))
np.savetxt('absorption_cross_sec.txt',oscillator_summed_file, delimiter=',')

plt.figure()
plt.semilogy(summed_dE, summed_oscill,'b-')
plt.xlabel('Ei-Ej [eV]')
plt.ylabel('absorption cross section [m^2s^-1](??)')
plt.savefig('abs_crosssec.png')
plt.show()
